{"title":"TOOLSMITHについて","markdown":{"yaml":{"title":"TOOLSMITHについて","author":"watanabe3tipapa","date":"last-modified","image":"assets/quarto-logo.png","description":"toolsmith.watanabe3ti.comは baserCMSを利用し構築したサイトです。\nティザーサイトとしての役割（？）もあると思っています。\nコードと文章を融合させた魅力的なドキュメントは良いものです。\n","categories":["Quarto","Markdown","Notation"],"tags":["basercms","cms","git"]},"headingText":"toolsmith.watanabe3ti.comとは？","containsRefs":false,"markdown":"\n\n\ntoolsmith.watanabe3ti.comは、BaserCMSで構築しています。\n単一のフォーマットから、ウェブサイト、ブログなど、様々な形式のドキュメントを生成することができます。\n\n## baserCMSについて\n\n### baserCMSとは\n\nbaserCMSは、PHPベースのオープンソースCMSプラットフォームで、以下のような特徴があります：\n\n- **柔軟なカスタマイズ性**\n  - テーマシステムによる自由なデザイン変更\n  - プラグインによる機能拡張\n  - PHPによる開発のしやすさ\n\n- **使いやすい管理画面**\n  - 直感的なユーザーイターフェース\n  - ドラッグ&ドロップによるコンテンツ管理\n  - SEOに配慮した設定オプション\n\n- **高い拡張性**\n  - カスタムコンテンツタイプの作成\n  - APIによる外部システムとの連携\n  - マルチサイト機能\n\n### なぜbaserCMSを選んだのか\n\n1. **日本製CMSのメリット**\n    - 日本語環境の完全サポート\n    - 国内での充実したコミュニティ\n    - 日本のウェブ慣習に適合\n\n2. **開発のしやすさ**\n    - PHPベースの親しみやすい環境\n    - CakePHPフレームワークの採用\n    - 豊富なドキュメントとサポート\n\n3. **セキュリティと安定性**\n    - 定期的なアップデート\n    - セキュリティ対策の充実\n    - 実績のある運用実績\n\n## baserCMSの追加特徴\n\n### 1. コンテンツ管理の高度な機能\n\n- **バージョン管理システム**\n  - コンテンツの変更履歴管理\n  - 複数バージョンの保存と復元\n  - チーム作業での変更追跡\n\n- **高度なメディア管理**\n  - 画像の自動リサイズ\n  - WebP形式の自動変換対応\n  - メディアライブラリの階層管理\n\n### 2. マルチデバイス対応\n\n- **レスポンシブデザイン対応**\n  - モバイルファースト設計\n  - AMP対応可能\n  - プレビュー機能でのデバイス別確認\n\n### 3. パフォーマンス最適化\n\n- **キャッシュシステム**\n  - ページキャッシュ機能\n  - データベースクエリ最適化\n  - CDN連携サポート\n\n### 4. 開発者向け機能\n\n- **APIサポート**\n  - RESTful API対応\n  - GraphQL対応（プラグイン利用）\n  - Webhookによる外部連携\n\n### 5. セキュリティ機能\n\n- **高度な認証システム**\n  - 二要素認証対応\n  - IPアドレス制限\n  - ログイン試行制限\n\n- **データ保護**\n  - バックアップ機能\n  - データの自動暗号化\n  - SSLサポート\n\n## なぜbaserCMSを使うのか？(技術的観点)\n\n### 1. 効率的なコンテンツ管理\n\n- **直感的な管理画面**\n  - ドラッグ&ドロップによる簡単な操作\n  - WYSIWYGエディタによる編集\n  - メディアライブラリの統合管理\n\n### 2. 開発効率の向上\n\n- **モダンな開発環境**\n  - CakePHPフレームワークベース\n  - コンポーネント指向の設計\n  - 充実した開発者ドキュメント\n\n### 3. ビジネスニーズへの適応\n\n- **拡張性と柔軟性**\n  - カスタムプラグインの開発\n  - テーマによるデザインカスタマイズ\n  - マルチサイト運用のサポート\n\n### 4. 運用とメンテナンス\n\n- **安定した運用基盤**\n  - 定期的なセキュリティアップデート\n  - アクティブなコミュニティサポート\n  - 豊富な実績と導入事例\n\n## 始め方\n\n1. baserCMSのインストール\n\n```bash\n# Composerを使用してインストール\ncomposer create-project baserproject/basercms\n\n# または、GitHubからクローン\ngit clone https://github.com/baserproject/basercms.git\ncd basercms\ncomposer install\n```\n\n2. データベースの設定\n```bash\n# 設定ファイルの作成\ncp config/.env.example config/.env\ncp config/app_local.example.php config/app_local.php\n\n# データベース接続情報を編集\nnano config/.env\n```\n\n3. インストールスクリプトの実行\n```bash\n# インストールスクリプトを実行\nbin/cake basercms install\n```\n\n4. 開発サーバーの起動\n```bash\nbin/cake server\n```\n\nこれで http://localhost:8765 にアクセスして管理画面を確認できます。\n\n### 初期設定のポイント\n\n- 管理者アカウントの作成\n- サイト基本設定の構成\n- テーマの選択とカスタマイズ\n- 必要なプラグインのインストール\n\n## baserCMSの技術的特徴\n\n### 1. アーキテクチャ設計\n\n- **MVCアーキテクチャ**\n  - CakePHP 4.x ベースの堅牢な設計\n  - プラグインアーキテクチャによる機能拡張\n  - イベント駆動型のシステム設計\n\n- **モジュール構成**\n  ```php\n  // プラグイン構造の例\n  plugins/\n    ├── MyPlugin/\n    │   ├── config/\n    │   ├── src/\n    │   │   ├── Controller/\n    │   │   ├── Model/\n    │   │   └── View/\n    │   └── templates/\n  ```\n\n### 2. データベース設計\n\n- **ORMの活用**\n  - エンティティとテーブルの明確な分離\n  - リレーションの柔軟な定義\n  - マイグレーションによるバージョン管理\n\n```php\n// エンティティの例\nclass Content extends Entity\n{\n    protected $_accessible = [\n        '*' => true,\n        'id' => false\n    ];\n    \n    protected function _getFullTitle()\n    {\n        return $this->title . ' (' . $this->id . ')';\n    }\n}\n```\n\n### 3. APIとインテグレーション\n\n- **RESTful API実装**\n  ```php\n  // APIコントローラーの例\n  class ApiController extends AppController\n  {\n      public function initialize(): void\n      {\n          parent::initialize();\n          $this->loadComponent('RequestHandler');\n      }\n  }\n  ```\n\n### 4. キャッシュシステム\n\n- **階層的キャッシュ**\n  - ビューキャッシュ\n  - クエリキャッシュ\n  - オブジェクトキャッシュ\n\n```php\n// キャッシュ設定例\nConfigure::write('Cache._cake_model_', [\n    'className' => 'File',\n    'prefix' => 'myapp_cake_model_',\n    'path' => CACHE . 'models/',\n    'serialize' => true,\n    'duration' => '+1 years'\n]);\n```\n\n### 5. セキュリティ実装\n\n- **XSS対策**\n  ```php\n  // テンプレートでのエスケープ処理\n  <?= h($content->title) ?>\n  ```\n\n- **CSRF保護**\n  ```php\n  // フォームでのCSRFトークン\n  <?= $this->Form->create($entity) ?>\n  // 自動的にCSRFトークンが追加される\n  ```\n\n### 6. カスタムフィールドタイプ\n\n```php\n// カスタムフィールドの実装例\nclass CustomField extends BcCustomField\n{\n    public function initialize(array $config): void\n    {\n        parent::initialize($config);\n        \n        $this->addFieldType('custom_type', [\n            'template' => 'custom_field',\n            'validator' => 'customValidation'\n        ]);\n    }\n}\n```\n\n### 7. イベントシステム\n\n```php\n// イベントリスナーの例\nclass CustomEventListener implements EventListenerInterface\n{\n    public function implementedEvents(): array\n    {\n        return [\n            'Model.beforeSave' => 'beforeSave',\n            'Controller.beforeRender' => 'beforeRender'\n        ];\n    }\n    \n    public function beforeSave(Event $event, Entity $entity)\n    {\n        // 保存前の処理\n    }\n}\n```\n\n## システムの拡張性と柔軟性\n\n### 1. カスタムプラグイン開発\n\n```php\n// plugins/MyCustomPlugin/src/Plugin.php\nnamespace MyCustomPlugin;\n\nuse BaserCore\\BcPlugin;\nuse Cake\\Core\\ContainerInterface;\n\nclass Plugin extends BcPlugin\n{\n    public function services(ContainerInterface $container): void\n    {\n        // サービス登録\n        $container->add('MyCustomService', function () {\n            return new MyCustomService();\n        });\n    }\n\n    public function initialize(): void\n    {\n        parent::initialize();\n        \n        // カスタムイベントの登録\n        $this->addEvent('MyCustom.afterProcess', [\n            'callable' => ['MyCustomEventListener', 'afterProcess']\n        ]);\n    }\n}\n```\n\n### 2. カスタムコントローラーの実装\n\n```php\n// plugins/MyCustomPlugin/src/Controller/CustomController.php\nnamespace MyCustomPlugin\\Controller;\n\nuse BaserCore\\Controller\\Admin\\BcAdminAppController;\n\nclass CustomController extends BcAdminAppController\n{\n    public function initialize(): void\n    {\n        parent::initialize();\n        \n        // コンポーネントの読み込み\n        $this->loadComponent('Paginator');\n        $this->loadComponent('Security');\n        \n        // 認証の設定\n        $this->Authentication->allowUnauthenticated(['index', 'view']);\n    }\n    \n    public function customAction()\n    {\n        // カスタム処理\n        $result = $this->CustomModel->customProcess();\n        \n        // APIレスポンス\n        $this->set(compact('result'));\n        $this->viewBuilder()->setOption('serialize', ['result']);\n    }\n}\n```\n\n### 3. カスタムモデルとバリデーション\n\n```php\n// plugins/MyCustomPlugin/src/Model/Table/CustomTable.php\nnamespace MyCustomPlugin\\Model\\Table;\n\nuse Cake\\ORM\\Table;\nuse Cake\\Validation\\Validator;\n\nclass CustomTable extends Table\n{\n    public function initialize(array $config): void\n    {\n        parent::initialize($config);\n        \n        // ビヘイビアの追加\n        $this->addBehavior('Timestamp');\n        $this->addBehavior('BaserCore.BcUpload', [\n            'fields' => ['image' => [\n                'type' => 'image',\n                'thumbnailSizes' => ['small' => '100x100']\n            ]]\n        ]);\n        \n        // アソシエーションの設定\n        $this->belongsTo('Categories');\n        $this->hasMany('Comments');\n    }\n    \n    public function validationDefault(Validator $validator): Validator\n    {\n        $validator\n            ->requirePresence('title')\n            ->notEmptyString('title')\n            ->maxLength('title', 255)\n            ->add('title', 'custom', [\n                'rule' => [$this, 'customValidation'],\n                'message' => 'カスタムバリデーションエラー'\n            ]);\n            \n        return $validator;\n    }\n    \n    public function customValidation($value, $context)\n    {\n        // カスタムバリデーションロジック\n        return true;\n    }\n}\n```\n\n### 4. カスタムビヘイビアの作成\n\n```php\n// plugins/MyCustomPlugin/src/Model/Behavior/CustomBehavior.php\nnamespace MyCustomPlugin\\Model\\Behavior;\n\nuse Cake\\ORM\\Behavior;\nuse Cake\\Event\\Event;\nuse Cake\\ORM\\Query;\n\nclass CustomBehavior extends Behavior\n{\n    protected $_defaultConfig = [\n        'field' => 'status',\n        'value' => 1\n    ];\n    \n    public function beforeFind(Event $event, Query $query)\n    {\n        $field = $this->getConfig('field');\n        $value = $this->getConfig('value');\n        \n        return $query->where([$field => $value]);\n    }\n    \n    public function beforeSave(Event $event, $entity)\n    {\n        // 保存前の処理\n        if ($entity->isNew()) {\n            $entity->created_by = $this->_table->getCurrentUser('id');\n        }\n        \n        return true;\n    }\n}\n```\n\n### 5. カスタムヘルパーの実装\n\n```php\n// plugins/MyCustomPlugin/src/View/Helper/CustomHelper.php\nnamespace MyCustomPlugin\\View\\Helper;\n\nuse Cake\\View\\Helper;\n\nclass CustomHelper extends Helper\n{\n    public $helpers = ['Html', 'Url'];\n}\n```\n\n\n**なかなかお腹いっぱいになってしまいますが、これくらい機能があって条件によっては無料で利用できるのですから使わない手はありません。**\n\n\n\n\n\n---\n\n\n","srcMarkdownNoYaml":"\n\n## toolsmith.watanabe3ti.comとは？\n\ntoolsmith.watanabe3ti.comは、BaserCMSで構築しています。\n単一のフォーマットから、ウェブサイト、ブログなど、様々な形式のドキュメントを生成することができます。\n\n## baserCMSについて\n\n### baserCMSとは\n\nbaserCMSは、PHPベースのオープンソースCMSプラットフォームで、以下のような特徴があります：\n\n- **柔軟なカスタマイズ性**\n  - テーマシステムによる自由なデザイン変更\n  - プラグインによる機能拡張\n  - PHPによる開発のしやすさ\n\n- **使いやすい管理画面**\n  - 直感的なユーザーイターフェース\n  - ドラッグ&ドロップによるコンテンツ管理\n  - SEOに配慮した設定オプション\n\n- **高い拡張性**\n  - カスタムコンテンツタイプの作成\n  - APIによる外部システムとの連携\n  - マルチサイト機能\n\n### なぜbaserCMSを選んだのか\n\n1. **日本製CMSのメリット**\n    - 日本語環境の完全サポート\n    - 国内での充実したコミュニティ\n    - 日本のウェブ慣習に適合\n\n2. **開発のしやすさ**\n    - PHPベースの親しみやすい環境\n    - CakePHPフレームワークの採用\n    - 豊富なドキュメントとサポート\n\n3. **セキュリティと安定性**\n    - 定期的なアップデート\n    - セキュリティ対策の充実\n    - 実績のある運用実績\n\n## baserCMSの追加特徴\n\n### 1. コンテンツ管理の高度な機能\n\n- **バージョン管理システム**\n  - コンテンツの変更履歴管理\n  - 複数バージョンの保存と復元\n  - チーム作業での変更追跡\n\n- **高度なメディア管理**\n  - 画像の自動リサイズ\n  - WebP形式の自動変換対応\n  - メディアライブラリの階層管理\n\n### 2. マルチデバイス対応\n\n- **レスポンシブデザイン対応**\n  - モバイルファースト設計\n  - AMP対応可能\n  - プレビュー機能でのデバイス別確認\n\n### 3. パフォーマンス最適化\n\n- **キャッシュシステム**\n  - ページキャッシュ機能\n  - データベースクエリ最適化\n  - CDN連携サポート\n\n### 4. 開発者向け機能\n\n- **APIサポート**\n  - RESTful API対応\n  - GraphQL対応（プラグイン利用）\n  - Webhookによる外部連携\n\n### 5. セキュリティ機能\n\n- **高度な認証システム**\n  - 二要素認証対応\n  - IPアドレス制限\n  - ログイン試行制限\n\n- **データ保護**\n  - バックアップ機能\n  - データの自動暗号化\n  - SSLサポート\n\n## なぜbaserCMSを使うのか？(技術的観点)\n\n### 1. 効率的なコンテンツ管理\n\n- **直感的な管理画面**\n  - ドラッグ&ドロップによる簡単な操作\n  - WYSIWYGエディタによる編集\n  - メディアライブラリの統合管理\n\n### 2. 開発効率の向上\n\n- **モダンな開発環境**\n  - CakePHPフレームワークベース\n  - コンポーネント指向の設計\n  - 充実した開発者ドキュメント\n\n### 3. ビジネスニーズへの適応\n\n- **拡張性と柔軟性**\n  - カスタムプラグインの開発\n  - テーマによるデザインカスタマイズ\n  - マルチサイト運用のサポート\n\n### 4. 運用とメンテナンス\n\n- **安定した運用基盤**\n  - 定期的なセキュリティアップデート\n  - アクティブなコミュニティサポート\n  - 豊富な実績と導入事例\n\n## 始め方\n\n1. baserCMSのインストール\n\n```bash\n# Composerを使用してインストール\ncomposer create-project baserproject/basercms\n\n# または、GitHubからクローン\ngit clone https://github.com/baserproject/basercms.git\ncd basercms\ncomposer install\n```\n\n2. データベースの設定\n```bash\n# 設定ファイルの作成\ncp config/.env.example config/.env\ncp config/app_local.example.php config/app_local.php\n\n# データベース接続情報を編集\nnano config/.env\n```\n\n3. インストールスクリプトの実行\n```bash\n# インストールスクリプトを実行\nbin/cake basercms install\n```\n\n4. 開発サーバーの起動\n```bash\nbin/cake server\n```\n\nこれで http://localhost:8765 にアクセスして管理画面を確認できます。\n\n### 初期設定のポイント\n\n- 管理者アカウントの作成\n- サイト基本設定の構成\n- テーマの選択とカスタマイズ\n- 必要なプラグインのインストール\n\n## baserCMSの技術的特徴\n\n### 1. アーキテクチャ設計\n\n- **MVCアーキテクチャ**\n  - CakePHP 4.x ベースの堅牢な設計\n  - プラグインアーキテクチャによる機能拡張\n  - イベント駆動型のシステム設計\n\n- **モジュール構成**\n  ```php\n  // プラグイン構造の例\n  plugins/\n    ├── MyPlugin/\n    │   ├── config/\n    │   ├── src/\n    │   │   ├── Controller/\n    │   │   ├── Model/\n    │   │   └── View/\n    │   └── templates/\n  ```\n\n### 2. データベース設計\n\n- **ORMの活用**\n  - エンティティとテーブルの明確な分離\n  - リレーションの柔軟な定義\n  - マイグレーションによるバージョン管理\n\n```php\n// エンティティの例\nclass Content extends Entity\n{\n    protected $_accessible = [\n        '*' => true,\n        'id' => false\n    ];\n    \n    protected function _getFullTitle()\n    {\n        return $this->title . ' (' . $this->id . ')';\n    }\n}\n```\n\n### 3. APIとインテグレーション\n\n- **RESTful API実装**\n  ```php\n  // APIコントローラーの例\n  class ApiController extends AppController\n  {\n      public function initialize(): void\n      {\n          parent::initialize();\n          $this->loadComponent('RequestHandler');\n      }\n  }\n  ```\n\n### 4. キャッシュシステム\n\n- **階層的キャッシュ**\n  - ビューキャッシュ\n  - クエリキャッシュ\n  - オブジェクトキャッシュ\n\n```php\n// キャッシュ設定例\nConfigure::write('Cache._cake_model_', [\n    'className' => 'File',\n    'prefix' => 'myapp_cake_model_',\n    'path' => CACHE . 'models/',\n    'serialize' => true,\n    'duration' => '+1 years'\n]);\n```\n\n### 5. セキュリティ実装\n\n- **XSS対策**\n  ```php\n  // テンプレートでのエスケープ処理\n  <?= h($content->title) ?>\n  ```\n\n- **CSRF保護**\n  ```php\n  // フォームでのCSRFトークン\n  <?= $this->Form->create($entity) ?>\n  // 自動的にCSRFトークンが追加される\n  ```\n\n### 6. カスタムフィールドタイプ\n\n```php\n// カスタムフィールドの実装例\nclass CustomField extends BcCustomField\n{\n    public function initialize(array $config): void\n    {\n        parent::initialize($config);\n        \n        $this->addFieldType('custom_type', [\n            'template' => 'custom_field',\n            'validator' => 'customValidation'\n        ]);\n    }\n}\n```\n\n### 7. イベントシステム\n\n```php\n// イベントリスナーの例\nclass CustomEventListener implements EventListenerInterface\n{\n    public function implementedEvents(): array\n    {\n        return [\n            'Model.beforeSave' => 'beforeSave',\n            'Controller.beforeRender' => 'beforeRender'\n        ];\n    }\n    \n    public function beforeSave(Event $event, Entity $entity)\n    {\n        // 保存前の処理\n    }\n}\n```\n\n## システムの拡張性と柔軟性\n\n### 1. カスタムプラグイン開発\n\n```php\n// plugins/MyCustomPlugin/src/Plugin.php\nnamespace MyCustomPlugin;\n\nuse BaserCore\\BcPlugin;\nuse Cake\\Core\\ContainerInterface;\n\nclass Plugin extends BcPlugin\n{\n    public function services(ContainerInterface $container): void\n    {\n        // サービス登録\n        $container->add('MyCustomService', function () {\n            return new MyCustomService();\n        });\n    }\n\n    public function initialize(): void\n    {\n        parent::initialize();\n        \n        // カスタムイベントの登録\n        $this->addEvent('MyCustom.afterProcess', [\n            'callable' => ['MyCustomEventListener', 'afterProcess']\n        ]);\n    }\n}\n```\n\n### 2. カスタムコントローラーの実装\n\n```php\n// plugins/MyCustomPlugin/src/Controller/CustomController.php\nnamespace MyCustomPlugin\\Controller;\n\nuse BaserCore\\Controller\\Admin\\BcAdminAppController;\n\nclass CustomController extends BcAdminAppController\n{\n    public function initialize(): void\n    {\n        parent::initialize();\n        \n        // コンポーネントの読み込み\n        $this->loadComponent('Paginator');\n        $this->loadComponent('Security');\n        \n        // 認証の設定\n        $this->Authentication->allowUnauthenticated(['index', 'view']);\n    }\n    \n    public function customAction()\n    {\n        // カスタム処理\n        $result = $this->CustomModel->customProcess();\n        \n        // APIレスポンス\n        $this->set(compact('result'));\n        $this->viewBuilder()->setOption('serialize', ['result']);\n    }\n}\n```\n\n### 3. カスタムモデルとバリデーション\n\n```php\n// plugins/MyCustomPlugin/src/Model/Table/CustomTable.php\nnamespace MyCustomPlugin\\Model\\Table;\n\nuse Cake\\ORM\\Table;\nuse Cake\\Validation\\Validator;\n\nclass CustomTable extends Table\n{\n    public function initialize(array $config): void\n    {\n        parent::initialize($config);\n        \n        // ビヘイビアの追加\n        $this->addBehavior('Timestamp');\n        $this->addBehavior('BaserCore.BcUpload', [\n            'fields' => ['image' => [\n                'type' => 'image',\n                'thumbnailSizes' => ['small' => '100x100']\n            ]]\n        ]);\n        \n        // アソシエーションの設定\n        $this->belongsTo('Categories');\n        $this->hasMany('Comments');\n    }\n    \n    public function validationDefault(Validator $validator): Validator\n    {\n        $validator\n            ->requirePresence('title')\n            ->notEmptyString('title')\n            ->maxLength('title', 255)\n            ->add('title', 'custom', [\n                'rule' => [$this, 'customValidation'],\n                'message' => 'カスタムバリデーションエラー'\n            ]);\n            \n        return $validator;\n    }\n    \n    public function customValidation($value, $context)\n    {\n        // カスタムバリデーションロジック\n        return true;\n    }\n}\n```\n\n### 4. カスタムビヘイビアの作成\n\n```php\n// plugins/MyCustomPlugin/src/Model/Behavior/CustomBehavior.php\nnamespace MyCustomPlugin\\Model\\Behavior;\n\nuse Cake\\ORM\\Behavior;\nuse Cake\\Event\\Event;\nuse Cake\\ORM\\Query;\n\nclass CustomBehavior extends Behavior\n{\n    protected $_defaultConfig = [\n        'field' => 'status',\n        'value' => 1\n    ];\n    \n    public function beforeFind(Event $event, Query $query)\n    {\n        $field = $this->getConfig('field');\n        $value = $this->getConfig('value');\n        \n        return $query->where([$field => $value]);\n    }\n    \n    public function beforeSave(Event $event, $entity)\n    {\n        // 保存前の処理\n        if ($entity->isNew()) {\n            $entity->created_by = $this->_table->getCurrentUser('id');\n        }\n        \n        return true;\n    }\n}\n```\n\n### 5. カスタムヘルパーの実装\n\n```php\n// plugins/MyCustomPlugin/src/View/Helper/CustomHelper.php\nnamespace MyCustomPlugin\\View\\Helper;\n\nuse Cake\\View\\Helper;\n\nclass CustomHelper extends Helper\n{\n    public $helpers = ['Html', 'Url'];\n}\n```\n\n\n**なかなかお腹いっぱいになってしまいますが、これくらい機能があって条件によっては無料で利用できるのですから使わない手はありません。**\n\n\n\n\n\n---\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css","custom-responsive.css"],"toc":true,"highlight-style":"github","html-math-method":"katex","output-file":"toolsmith.html"},"language":{"toc-title-document":"目次","toc-title-website":"目次","related-formats-title":"その他のフォーマット","related-notebooks-title":"Notebooks","source-notebooks-prefix":"ソース","other-links-title":"その他のリンク","code-links-title":"コードリンクス","launch-dev-container-title":"Devコンテナを起動する","launch-binder-title":"ランチ Binder","article-notebook-label":"記事ノート","notebook-preview-download":"ノートブックをダウンロード","notebook-preview-download-src":"ソースコードをダウンロードする","notebook-preview-back":"記事に戻る","manuscript-meca-bundle":"MECAアーカイブ","section-title-abstract":"概要","section-title-appendices":"付録","section-title-footnotes":"脚注","section-title-references":"参考文献","section-title-reuse":"ライセンス","section-title-copyright":"著作権","section-title-citation":"引用","appendix-attribution-cite-as":"引用方法","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"ライセンスを表示","title-block-author-single":"作者","title-block-author-plural":"作者","title-block-affiliation-single":"所属","title-block-affiliation-plural":"所属","title-block-published":"公開","title-block-modified":"更新日","title-block-keywords":"キーワード","callout-tip-title":"ヒント","callout-note-title":"ノート","callout-warning-title":"警告","callout-important-title":"重要","callout-caution-title":"注意","code-summary":"コード","code-tools-menu-caption":"コード","code-tools-show-all-code":"すべてのコードを表示","code-tools-hide-all-code":"すべてのコードを非表示","code-tools-view-source":"ソースコードを表示","code-tools-source-code":"ソースコード","tools-share":"Share","tools-download":"Download","code-line":"ライン","code-lines":"ライン","copy-button-tooltip":"コピー","copy-button-tooltip-success":"コピーしました","repo-action-links-edit":"編集","repo-action-links-source":"ソースコード","repo-action-links-issue":"問題を報告","back-to-top":"トップに戻る","search-no-results-text":"一致なし","search-matching-documents-text":"一致した文書","search-copy-link-title":"検索へのリンクをコピー","search-hide-matches-text":"追加の検索結果を非表示","search-more-match-text":"追加の検索結果","search-more-matches-text":"追加の検索結果","search-clear-button-title":"消去","search-text-placeholder":"","search-detached-cancel-button-title":"取消","search-submit-button-title":"検索","search-label":"サーチ","toggle-section":"セクションを切り替え","toggle-sidebar":"サイドバーを切り替える","toggle-dark-mode":"ダークモードの切り替え","toggle-reader-mode":"リーダーモードの切り替え","toggle-navigation":"ナビゲーションを切り替える","crossref-fig-title":"図","crossref-tbl-title":"表","crossref-lst-title":"コード","crossref-thm-title":"定理","crossref-lem-title":"補題","crossref-cor-title":"系","crossref-prp-title":"命題","crossref-cnj-title":"予想","crossref-def-title":"定義","crossref-exm-title":"例","crossref-exr-title":"練習","crossref-ch-prefix":"チャプター","crossref-apx-prefix":"付録","crossref-sec-prefix":"セクション","crossref-eq-prefix":"式","crossref-lof-title":"図一覧","crossref-lot-title":"表一覧","crossref-lol-title":"コード一覧","environment-proof-title":"証明","environment-remark-title":"注釈","environment-solution-title":"解答","listing-page-order-by":"並び替え","listing-page-order-by-default":"デフォルト","listing-page-order-by-date-asc":"日付（昇順）","listing-page-order-by-date-desc":"日付（降順）","listing-page-order-by-number-desc":"ページ番号（降順）","listing-page-order-by-number-asc":"ページ番号（昇順）","listing-page-field-date":"日付","listing-page-field-title":"題名","listing-page-field-description":"説明","listing-page-field-author":"作者","listing-page-field-filename":"ファイル名","listing-page-field-filemodified":"更新日","listing-page-field-subtitle":"副題","listing-page-field-readingtime":"読了目安","listing-page-field-wordcount":"単語数","listing-page-field-categories":"分類","listing-page-minutes-compact":"{0} 分","listing-page-category-all":"すべて","listing-page-no-matches":"一致なし","listing-page-words":"{0}語","listing-page-filter":"フィルター","draft":"下書き"},"metadata":{"lang":"ja-JP","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":{"light":["flatly","custom.scss"],"dark":["darkly","custom.scss"]},"toc-location":"left","mainfont":"Noto Sans JP","monofont":"Fira Code","title":"TOOLSMITHについて","author":"watanabe3tipapa","date":"last-modified","image":"assets/quarto-logo.png","description":"toolsmith.watanabe3ti.comは baserCMSを利用し構築したサイトです。\nティザーサイトとしての役割（？）もあると思っています。\nコードと文章を融合させた魅力的なドキュメントは良いものです。\n","categories":["Quarto","Markdown","Notation"],"tags":["basercms","cms","git"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}